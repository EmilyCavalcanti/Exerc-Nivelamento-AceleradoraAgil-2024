 TIPOS AVANÇADOS OU ESPECIAIS 

 - union type: quando um valor pode ter mais de um tipo.

     //let myVar: string | number
 --Neste caso a variável pode ser string ou número.

 ********************************************************************************************


- any(qualquer): é um tipo que desabilita a verificação de tipos.

  //let teste:any = 100;

--neste caso pode ser qualquer tipo de dado.
[ALERTA]: evita erros mas não traz segurança, por exemplo, quando necessário realizar validações de dados. Deve ser evitado.

********************************************************************************************

- unknown(desconhecido) : é uma alternativa do any,exige uma verificação ou conversões explícitas.

   //let valor: unknown = 100;

-- traz mais segurança para as operações porque exige a verificação ou conversão do dado.

    //let converte = valor as string;  [converteu os dados, agora podemos trabalhar de forma correta sem erros, o AS é usado para converter o tipo. (váriavel É string)] 

********************************************************************************************

- never(nunca): lança um erro sempre que é definido, quase nunca é usado.
   
   //let b: never = true; 

-- SEMPRE irá apontar um erro não importa o tipo de dado

********************************************************************************************

- array: Ts tem uma sintaxe específica para matrizes.

   //cont names: string [] = [];
   names.push("oi");  *sem erro
   names.push(oi); *com erro

-- Tipagem da matriz para padronizar o tipo de dado que ela pode receber.

********************************************************************************************
- readonly: apenas leitura;
   //const nomes: readonly string[] = ["Vivian", "Emily"];
   nomes.push("Wagner"); *erro

-- só permite leitura, sem manipulação.

********************************************************************************************
- inferência de tipo: pode inferir o tipo de uma matriz se ela tiver valores. Se criarmos a matriz de forma implícita.

-- se uma matriz está tipada como number, sempre que der um push o dado precisa ser equivalente a tipagem para não dar erro.Podemos criar outra variável e pegar algum item da matriz pelo índice.  

********************************************************************************************

- tupla: é um array/matriz tipada com um comprimento e tipos prédefinidos para cada índice.Permite que cada elemento da matriz tenha um tipo.

    //let nossaTupla:[number, boolean,string];
 nossaTupla=[5, false,'oi'];

--normalmente usadas do tipo readonly, para que tenhamos o controle do tamanho da tupla e não perder o sentido de uso dela, já que podemos adicionar mais elementos.

********************************************************************************************
-objects: são var's com muitos valores dentro.

   //const carro: {marca:string, modelo:string, ano:number} = {
    marca: "Ford",
    modelo: "k"a",
    ano: "2001"
   };

-- são definidos na tipagem, cada atributo já terá seu tipo definido, evita erros na entrada dos dados já que são diversas variáveis.

PROPRIEDADES OPCIONAIS

   //const carro2: {modelo: string, motor?: number } = {
    modelo: "Uno",
   };

   carro.motor =1.0;

--podem ser preenchidas ou não, dados menos importantes. Pode ser que tenhamos eles ou não, e não fará diferença no resultado.

-assinaturas de índice: podem ser usadaspara objetos sem uma lista definida de propriedades.

  //const nomeIdade: {[index: string]: number} = {}
  nomeIdade["Emily"] = 25;
********************************************************************************************



